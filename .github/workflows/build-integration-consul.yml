name: Consul Integration
run-name: "Consul Release ${{ inputs.tag }} (UBI=${{ inputs.build_ubi }}) by @${{ github.actor }}"

on:
  workflow_dispatch:
    inputs:
      hashicorp-consul-tag:
        description: "Git tag of hashicorp/consul to release (e.g. v1.21.3)"
        required: true
        default: "v1.21.3"
      tag:
        description: "Tag for release and Docker images (e.g. v1.21.3)"
        required: true
        default: "v1.21.3-patched"
      build_ubi:
        description: "Also build UBI variant (target=ubi)"
        type: boolean
        required: false
        default: false

permissions:
  contents: write # create GitHub Release & upload assets
  packages: write # push images to GHCR

env:
  BIN_NAME: consul-${{ inputs.tag }}
  NODE_VERSION: "18"
  FULL_BASE_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/qubership-consul-base:${{ inputs.tag }}

jobs:
  build:
    name: Build UI + binaries (amd64/arm64) and pack artifacts
    runs-on: ubuntu-latest

    steps:

      - name: Checkout hashicorp/consul source
        uses: actions/checkout@v5
        with:
          repository: hashicorp/consul
          ref: ${{ inputs.hashicorp-consul-tag }}

      - name: Checkout consul-patches
        uses: actions/checkout@v5
        with:
          path: consul-patches

      - name: List patches to apply
        run: |
          ls -la .
          ls -la consul-patches
          ls -la ui
          cat ui/package.json

      - name: Apply patches
        run: |
          cd ${GITHUB_WORKSPACE}
          for p in ./consul-patches/patches/${{ inputs.hashicorp-consul-tag }}/*.patch; do
            echo "Applying $p…"
            git apply -p1 --ignore-space-change --ignore-whitespace "$p"
          done
          rm -rf ./consul-patches

      - name: Detect Go version
        id: go
        run: |
          version=$(cat .go-version 2>/dev/null || echo 1.21.6)
          echo "Detected Go version: $version"
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "GO_VERSION=$version" >> "$GITHUB_ENV"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go.outputs.version }}

      - name: Cache Go modules/build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            $(go env GOPATH)/pkg/mod
          key: ${{ runner.os }}-go-${{ steps.go.outputs.version }}-${{ hashFiles('consul/**/go.sum') }}

      - name: Build binaries (linux/amd64 + linux/arm64) into dist/
        shell: bash
        run: |
          set -eux
          export CGO_ENABLED=0
          CONSUL_VERSION=${{ inputs.hashicorp-consul-tag }}
          if [ -x build-support/scripts/build-date.sh ]; then
            CONSUL_DATE=$(./build-support/scripts/build-date.sh)
          else
            CONSUL_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          fi
          GIT_COMMIT=$(git rev-parse --short=8 HEAD)
          LDFLAGS="-X github.com/hashicorp/consul/version.GitCommit=${GIT_COMMIT} \
                   -X github.com/hashicorp/consul/version.GitDescribe=${CONSUL_VERSION} \
                   -X github.com/hashicorp/consul/version.BuildDate=${CONSUL_DATE}"
          mkdir -p dist/linux/amd64
          GOOS=linux GOARCH=amd64 go build -ldflags="$LDFLAGS" -trimpath -buildvcs=false -o dist/linux/amd64/${{ env.BIN_NAME }} ./main.go
          mkdir -p dist/linux/arm64
          GOOS=linux GOARCH=arm64 go build -ldflags="$LDFLAGS" -trimpath -buildvcs=false -o dist/linux/arm64/${{ env.BIN_NAME }} ./main.go
          chmod +x dist/linux/*/${{ env.BIN_NAME }}

      - name: Detect Node version for UI
        id: node
        shell: bash
        run: |
          set -euo pipefail
          # priority: .nvmrc → .node-version → package.json engines.node → fallback=18
          if [ -f ui/.nvmrc ]; then
            ver=$(tr -d ' \t\r\n' < ui/.nvmrc)
          elif [ -f ui/.node-version ]; then
            ver=$(tr -d ' \t\r\n' < ui/.node-version)
          elif [ -f ui/package.json ]; then
            engines_line=$(grep -A3 '"engines"' ui/package.json || true)
            node_req=$(echo "$engines_line" | grep -E '"node"\s*:' | sed -E 's/.*"node"\s*:\s*"([^"]+)".*/\1/')
            major=$(echo "$node_req" | sed -E 's/[^0-9.]+/ /g' | awk -F. '{print $1}' | awk '{print $1}')
            if [ -n "${major:-}" ]; then ver="$major"; else ver="18"; fi
          else
            ver="18"
          fi
          echo "version=$ver" >> "$GITHUB_OUTPUT"
          echo "NODE_VERSION=$ver" >> "$GITHUB_ENV"
          echo "Detected Node.js version: $ver"

      - name: Setup Node.js (auto-detected)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build UI
        shell: bash
        run: |
          set -eux
          CONSUL_VERSION=${{ inputs.hashicorp-consul-tag }}
          if [ -x build-support/scripts/build-date.sh ]; then
            CONSUL_DATE=$(./build-support/scripts/build-date.sh)
          else
            CONSUL_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          fi
          GIT_COMMIT=$(git rev-parse --short=8 HEAD)
          echo "UI for $CONSUL_VERSION ($GIT_COMMIT @ $CONSUL_DATE)"
          cd ui
          yarn install --frozen-lockfile
          make
          cd ..
          rm -rf agent/uiserver/dist
          mv ui/packages/consul-ui/dist agent/uiserver/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build base Docker image
        uses: docker/build-push-action@v6
        with:
          context: "."
          file: Dockerfile
          target: default
          platforms: linux/amd64,linux/arm64
          tags: ${{env.FULL_BASE_IMAGE_NAME }}
          build-args: |
            BIN_NAME=consul
            PRODUCT_VERSION=${{ inputs.hashicorp-consul-tag }}
            PRODUCT_REVISION=${{ github.sha }}
          push: true
          provenance: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: consul-${{ inputs.tag }}
          path: |
            dist/linux/amd64/${{ env.BIN_NAME }}
            dist/linux/arm64/${{ env.BIN_NAME }}
          if-no-files-found: error

  # github_release:
  #   name: Create GitHub Release & upload assets
  #   runs-on: ubuntu-latest
  #   needs: [build, docker]

  #   steps:
  #     - name: Download release artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: consul-${{ inputs.tag }}-artifacts
  #         path: consul-release

  #     - name: Create GitHub Release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ inputs.tag }}
  #         name: Consul ${{ inputs.tag }}
  #         body: |
  #           Automated Consul release from source with multi-arch Docker images.

  #           Docker images:
  #           - default: `${{ needs.build.outputs.image }}:${{ inputs.tag }} (=${{ needs.build.outputs.no_v }})`
  #           - ubi:     `${{ needs.build.outputs.image }}:${{ inputs.tag }}-ubi` (if enabled)

  #           Artifacts:
  #           - linux/amd64 and linux/arm64 zips
  #           - SHA256SUMS.txt
  #         draft: false
  #         prerelease: false
  #         files: |
  #           consul-release/release/consul_*_linux_*.zip
  #           consul-release/release/SHA256SUMS.txt
